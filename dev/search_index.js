var documenterSearchIndex = {"docs":
[{"location":"robust_po/#Robust-Portfolio-Optimization","page":"Robust PO","title":"Robust Portfolio Optimization","text":"","category":"section"},{"location":"robust_po/","page":"Robust PO","title":"Robust PO","text":"Acknowledgements: Robust Formulations based on and inspired by Professor Davi M. Valladão's lectures on \"Capital Market\".","category":"page"},{"location":"robust_po/#Motivation","page":"Robust PO","title":"Motivation","text":"","category":"section"},{"location":"robust_po/","page":"Robust PO","title":"Robust PO","text":"Portfolio Optimization (PO) formulations were developed to adapt to a variety of settings for decisions under uncertainty. These formulations depend on the available information of the uncertain data and the risk aversion of the decision-maker.","category":"page"},{"location":"robust_po/","page":"Robust PO","title":"Robust PO","text":"The available information for many market data (e.g. stock prices, future prices, etc) have non-stationary profiles that are hard to make statistical inference on. Thus, it can be hard to find good probability distributions needed for stochastic optimization. ","category":"page"},{"location":"robust_po/","page":"Robust PO","title":"Robust PO","text":"One alternative approach is Robust Optimization.","category":"page"},{"location":"robust_po/#Background","page":"Robust PO","title":"Background","text":"","category":"section"},{"location":"robust_po/","page":"Robust PO","title":"Robust PO","text":"Robust Optimization (RO) problems belong to the class of optimization under uncertainty problems where some problem data is uncertain (either because the decision is taken before the realization of the random event or because its observation is not available). Usual application cases for RO are when there isn’t sufficient information to derive probability distributions, but this isn’t strictly necessary. RO focuses on guaranteeing solution feasibility for any possible value of the uncertain data inside a defined Uncertainty Set. In the case where the uncertainty impacts the objective function, it guarantees optimality for the works case scenario considered in the Uncertainty Set.","category":"page"},{"location":"robust_po/","page":"Robust PO","title":"Robust PO","text":"Many uncertainty sets have been proposed to accommodate different levels of conservatism and data structures ([1]-[7]). A comparison of uncertainty sets to usual risk measures used in finance was made in [4] and [11].","category":"page"},{"location":"robust_po/","page":"Robust PO","title":"Robust PO","text":"A collection of recent contributions to robust portfolio strategies was made in [7 - 10]. Data-driven approaches to robust PO also gained interest in recent years and can be found in [12] - for a portfolio of stocks - and [13] - for a portfolio of future contracts. The results in those studies indicate promising alternatives for the integration between uncertain data and PO.","category":"page"},{"location":"robust_po/#Problem-Definition","page":"Robust PO","title":"Problem Definition","text":"","category":"section"},{"location":"robust_po/","page":"Robust PO","title":"Robust PO","text":"Simple versions of the Mean-Variance PO problem with robust uncertainty around the estimated mean returns are implemented by the following functions:","category":"page"},{"location":"robust_po/","page":"Robust PO","title":"Robust PO","text":"po_min_variance_limit_return!","category":"page"},{"location":"robust_po/#PortfolioOpt.po_min_variance_limit_return!","page":"Robust PO","title":"PortfolioOpt.po_min_variance_limit_return!","text":"po_min_variance_limit_return!(model::JuMP.Model, w, formulation::AbstractPortfolioFormulation, R)\n\nMean-Variance Portfolio Alocation (with a risk free asset). Posed as a quadratic convex problem. Minimizes worst case portfolio variance (V) and limit worst case portfolio return (R) in the uncertainty set (Omega) to a minimal return parameter (R_0) normalized by current wealth (W_0).\n\nbeginaligned\nmin_w quad  V \nst quad  R = (min rw    r in Omega) \n V = (max w  Sigma w     Sigma in Omega) \n R geq R * W_0 \n w in mathcalX \nendaligned\n\nWhere mathcalX represents the additional constraints defined in the model by the user  (like maximum invested money).\n\n\n\n\n\n","category":"function"},{"location":"robust_po/","page":"Robust PO","title":"Robust PO","text":"po_max_return_limit_variance!","category":"page"},{"location":"robust_po/#PortfolioOpt.po_max_return_limit_variance!","page":"Robust PO","title":"PortfolioOpt.po_max_return_limit_variance!","text":"po_max_return_limit_variance!(model::JuMP.Model, w, formulation::AbstractPortfolioFormulation, V_0)\n\nMean-Variance Portfolio Alocation (with a risk free asset). Posed as a quadratic convex problem. Maximizes worst case portfolio return (R) and limit worst case portfolio variance (V) in the uncertainty set (Omega)  to a minimal risk parameter (V_0) normalized by current wealth (W_0).\n\nbeginaligned\nmax_w quad  R \nst quad  R = (min rw    r in Omega) \n V leq MaxRisk * W_0\n V = (max w  Sigma w     Sigma in Omega) \n w in mathcalX \nendaligned\n\nWhere mathcalX represents the additional constraints defined in the model by the user  (like maximum invested money).\n\n\n\n\n\n","category":"function"},{"location":"robust_po/#Bertsimas's-Uncertainty-Set","page":"Robust PO","title":"Bertsimas's Uncertainty Set","text":"","category":"section"},{"location":"robust_po/","page":"Robust PO","title":"Robust PO","text":"The uncertainty set proposed by Bertsimas in [6] is defined by the julia type (RobustBertsimas):","category":"page"},{"location":"robust_po/","page":"Robust PO","title":"Robust PO","text":"Omega = left mu  middle beginarrayll\nst  quad mu_i leq hatr_i + z_i Delta_i quad forall i = 1mathcalN \nquad quad mu_i geq hatr_i - z_i Delta_i  quad forall i = 1mathcalN \nquad quad z_i geq 0 quad forall i = 1mathcalN \nquad quad z_i leq 1 quad forall i = 1mathcalN \nquad quad sum_i^mathcalN z_i leq Gamma \nendarray\nright ","category":"page"},{"location":"robust_po/","page":"Robust PO","title":"Robust PO","text":"where:","category":"page"},{"location":"robust_po/","page":"Robust PO","title":"Robust PO","text":"hatr: Predicted mean of returns.\nDelta: Uncertainty around mean.\nGamma: Budjet (sometimes interpreted as number of assets in worst case).\nSigma: Predicted covariance of returns.","category":"page"},{"location":"robust_po/","page":"Robust PO","title":"Robust PO","text":"When the previously described problem definition functions are dispatched on this type (referred to as a formulation), a JuMP expression defining the worst case return (R) is returned by the function (portfolio_return!(model::JuMP.Model, w, formulation::RobustBertsimas)). In this case, R in the described uncertainty set is defined by the following primal problem:  ","category":"page"},{"location":"robust_po/","page":"Robust PO","title":"Robust PO","text":"beginaligned\nmin_mu z quad  mu  w \nst quad  mu_i leq hatr_i + z_i Delta_i quad forall i = 1mathcalN quad  pi^-_i \n mu_i geq hatr_i - z_i Delta_i  quad forall i = 1mathcalN quad  pi^+_i \n z_i geq 0 quad forall i = 1mathcalN \n z_i leq 1 quad forall i = 1mathcalN quad  theta_i \n sum_i^mathcalN z_i leq Gamma quad  lambda \nendaligned","category":"page"},{"location":"robust_po/","page":"Robust PO","title":"Robust PO","text":"However, the above equations cannot be directly incorporated in the upper-level problem since no of-the-shelf solver can solve the resulting bi-level (\"MinMax\") optimization problem. Moreover, our case becomes even harder given the variable multiplication of the upper-level variabel (w) with the lower-level decision variable (mu) in the objective function of the primal problem. The solution to this issue is to use of the following equivalent dual problem:","category":"page"},{"location":"robust_po/","page":"Robust PO","title":"Robust PO","text":"beginaligned\nmax_lambda pi^- pi^+ theta quad   sum_i^mathcalN (hatr_i (pi^+_i pi^-_i) - theta_i ) - Gamma lambda\nst  quad  w_i = pi^+_i - pi^-_i  quad forall i = 1mathcalN \n  Delta_i (pi^+_i + pi^-_i) - theta_i leq lambda quad forall i = 1mathcalN \n lambda geq 0   pi^- geq 0   pi^+ geq 0   theta geq 0 \nendaligned","category":"page"},{"location":"robust_po/","page":"Robust PO","title":"Robust PO","text":"Moreover, to avoid having a bi-level optimization problem, we replace the lower-level problem by its objective function expression and enforece the dual constraints in the upper-level problem, defining a lower bound for the optimal value (which will be exact if the upper-level problem requires). ","category":"page"},{"location":"robust_po/","page":"Robust PO","title":"Robust PO","text":"In the meantime, the worst case variance, is calculated as in a usual Mean Variance PO since this uncertainty set does not imply any uncertainty about the covariance matrix (portfolio_variance!(::JuMP.Model, w, ::RobustBertsimas)): w  Sigma w.","category":"page"},{"location":"robust_po/","page":"Robust PO","title":"Robust PO","text":"Finally, for instance, the resulting \"Maximization of Returns\" problem (po_max_return_limit_variance!) becomes:","category":"page"},{"location":"robust_po/","page":"Robust PO","title":"Robust PO","text":"beginaligned\nmax_w lambda pi^- pi^+ theta quad  R \nst quad  R = sum_i^mathcalN (hatr_i (pi^+_i pi^-_i) - theta_i ) - Gamma lambda \n w_i = pi^+_i - pi^-_i  quad forall i = 1mathcalN \n  Delta_i (pi^+_i + pi^-_i) - theta_i leq lambda quad forall i = 1mathcalN \n w  Sigma w  leq V_0 * W_0 \n lambda geq 0   pi^- geq 0   pi^+ geq 0   theta geq 0 \n w in mathcalX \nendaligned","category":"page"},{"location":"robust_po/#Vizualization-and-Special-Case-(Soyster's-Uncertainty-Set)","page":"Robust PO","title":"Vizualization and Special Case (Soyster's Uncertainty Set)","text":"","category":"section"},{"location":"robust_po/","page":"Robust PO","title":"Robust PO","text":"In order to visualize Bertsimas's uncertainty set, it's useful to plot the case with only two assets. For instance, when the budjet parameter is equal to one (Gamma = 1) the resulting feasible region of the uncertaity set only allows one asset to be in its extreme value:","category":"page"},{"location":"robust_po/","page":"Robust PO","title":"Robust PO","text":"(Image: )","category":"page"},{"location":"robust_po/","page":"Robust PO","title":"Robust PO","text":"On the other hand, when the budjet parameter is equal to the number of assets (Gamma = 2), the uncertainty set becomes similar to the one proposed by Soyster in [1], i.e. box uncertainty:","category":"page"},{"location":"robust_po/","page":"Robust PO","title":"Robust PO","text":"(Image: )","category":"page"},{"location":"robust_po/#References","page":"Robust PO","title":"References","text":"","category":"section"},{"location":"robust_po/","page":"Robust PO","title":"Robust PO","text":"[1] Soyster, A.L. Convex programming with set-inclusive constraints and applications to inexact linear programming. Oper. Res. 1973, 21, 1154–1157.","category":"page"},{"location":"robust_po/","page":"Robust PO","title":"Robust PO","text":"[2] Ben-Tal, A. e Nemirovski, A. (1999). Robust solutions of uncertain linear programs. Operations research letters, 25(1):1–13. ","category":"page"},{"location":"robust_po/","page":"Robust PO","title":"Robust PO","text":"[3] Ben-Tal, A. e Nemirovski, A. (2000). Robust solutions of linear programming problems contaminated with uncertain data. Mathematical programming, 88(3):411–424. ","category":"page"},{"location":"robust_po/","page":"Robust PO","title":"Robust PO","text":"[4] Bertsimas, D. e Brown, D. B. (2009). Constructing uncertainty sets for robust linear optimization. Operations research, 57(6):1483–1495. ","category":"page"},{"location":"robust_po/","page":"Robust PO","title":"Robust PO","text":"[5] Bertsimas, D. e Pachamanova, D. (2008). Robust multiperiod portfolio management in the presence of transaction costs. Computers & Operations Research, 35(1):3–17. ","category":"page"},{"location":"robust_po/","page":"Robust PO","title":"Robust PO","text":"[6] Bertsimas, D. e Sim, M. (2004). The price of robustness. Operations research, 52(1):35–53. ","category":"page"},{"location":"robust_po/","page":"Robust PO","title":"Robust PO","text":"[7] Bertsimas, D. e Sim, M. (2006). Tractable approximations to robust conic optimization problems. Mathematical programming, 107(1-2):5–36. ","category":"page"},{"location":"robust_po/","page":"Robust PO","title":"Robust PO","text":"[8] Fabozzi, F. J., Huang, D., e Zhou, G. (2010). Robust portfolios: contributions from operations research and finance. Annals of Operations Research, 176(1):191–220. ","category":"page"},{"location":"robust_po/","page":"Robust PO","title":"Robust PO","text":"[9] Fabozzi, F. J., Kolm, P. N., Pachamanova, D. A., e Focardi, S. M. (2007). Robust portfolio optimization. Journal of Portfolio Management, 33(3):40. ","category":"page"},{"location":"robust_po/","page":"Robust PO","title":"Robust PO","text":"[10] Kim, J. H., Kim, W. C., e Fabozzi, F. J. (2014). Recent developments in robust portfolios with a worst-case approach. Journal of Optimization Theory and Applications, 161(1):103–121.","category":"page"},{"location":"robust_po/","page":"Robust PO","title":"Robust PO","text":"[11] Natarajan, K., Pachamanova, D., e Sim, M. (2009). Constructing risk measures from uncertainty sets. Operations research, 57(5):1129–1141.","category":"page"},{"location":"robust_po/","page":"Robust PO","title":"Robust PO","text":"[12] Fernandes, B., Street, A., ValladA˜ £o, D., e Fernandes, C. (2016). An adaptive robust portfolio optimization model with loss constraints based on data-driven polyhedral uncertainty sets. European Journal of Operational Research, 255(3):961 – 970. ISSN 0377-2217. URL.","category":"page"},{"location":"robust_po/","page":"Robust PO","title":"Robust PO","text":"[13] Futures Contracts Portfolio Selection via Robust Data Driven Optimization publication date Aug 9, 2018  publication descriptionL SBPO, 2018, Rio de Janeiro. Anais do L SBPO, 2018. v. 1. URL.","category":"page"},{"location":"api/#Api","page":"API","title":"Api","text":"","category":"section"},{"location":"api/#PortfolioOpt","page":"API","title":"PortfolioOpt","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [PortfolioOpt]","category":"page"},{"location":"api/","page":"API","title":"API","text":"Modules = [PortfolioOpt]","category":"page"},{"location":"api/#PortfolioOpt.MeanVariance","page":"API","title":"PortfolioOpt.MeanVariance","text":"MeanVariance <: AbstractMeanVariance\n\nMean Variance Formulation (Markowitz). \n\nPS.: Equivalent to a single point uncertainty set.\n\nAtributes:\n\npredicted_mean::Array{Float64,1}: Predicted mean of returns.\npredicted_covariance::Array{Float64,2}: Predicted covariance of returns.\n\n\n\n\n\n","category":"type"},{"location":"api/#PortfolioOpt.RobustBenTal","page":"API","title":"PortfolioOpt.RobustBenTal","text":"BenTal <: AbstractMeanVariance\n\nBenTal's uncertainty set:\n\nleft mu  middle beginarrayll\nst  quad sqrt(hatr - mu)  Sigma^-1 (hatr - mu) leq delta \nendarray\nright \n\nAtributes:\n\npredicted_mean::Array{Float64,1} (latex notation hatr): Predicted mean of returns.\nuncertainty_delta::Float64 (latex notation delta): Uncertainty around mean.\npredicted_covariance::Array{Float64,2} (latex notation Sigma): Predicted covariance of returns.\n\n\n\n\n\n","category":"type"},{"location":"api/#PortfolioOpt.RobustBertsimas","page":"API","title":"PortfolioOpt.RobustBertsimas","text":"RobustBertsimas <: AbstractMeanVariance\n\nBertsimas's uncertainty set:\n\nleft mu  middle beginarrayll\nst  quad mu_i leq hatr_i + z_i Delta_i quad forall i = 1mathcalN \nquad quad mu_i geq hatr_i - z_i Delta_i  quad forall i = 1mathcalN \nquad quad z_i geq 0 quad forall i = 1mathcalN \nquad quad z_i leq 1 quad forall i = 1mathcalN \nquad quad sum_i^mathcalN z_i leq Gamma \nendarray\nright \n\nAtributes:\n\npredicted_mean::Array{Float64,1} (latex notation hatr): Predicted mean of returns.\nuncertainty_delta::Array{Float64,1} (latex notation Delta): Uncertainty around mean.\nbertsimas_budjet::Array{Float64,1} (latex notation Gamma): Number of assets in worst case.\npredicted_covariance::Array{Float64,2}: Predicted covariance of returns.\n\n\n\n\n\n","category":"type"},{"location":"api/#PortfolioOpt.RobustBetina","page":"API","title":"PortfolioOpt.RobustBetina","text":"Betina Robust Sampled based Formulation\n\n\n\n\n\n","category":"type"},{"location":"api/#PortfolioOpt.RobustDelague","page":"API","title":"PortfolioOpt.RobustDelague","text":"RobustDelague <: AbstractMeanVariance\n\nDelague's Ambiguity set:\n\nleft r   middle beginarrayll\nst  quad (mathbbE r - hatr)  Sigma^-1 (mathbbE r - hatr) leq gamma_1 \nquad quad mathbbE  (r - hatr)  (r - hatr)  leq gamma_2 Sigma \nendarray\nright \n\nAtributes:\n\npredicted_mean::Array{Float64,1} (latex notation hatr): Predicted mean of returns.\npredicted_covariance::Array{Float64,2} (latex notation Sigma): Predicted covariance of returns.\nγ1::Float64: Mean uncertainty parameter (has to be greater than 0).\nγ2::Float64: Covariance uncertainty parameter (has to be greater than 1).\nutility_coeficients::Array{Float64,1}: Piece-wise utility coeficients (default 1).\nutility_intercepts::Array{Float64,1}: Piece-wise utility intercepts (default 0).\n\n\n\n\n\n","category":"type"},{"location":"api/#PortfolioOpt.SampleBased","page":"API","title":"PortfolioOpt.SampleBased","text":"Betina Robust Sampled based Formulation\n\n\n\n\n\n","category":"type"},{"location":"api/#PortfolioOpt.conditional_expectation!-Tuple{Any,Any,AbstractSampleBased}","page":"API","title":"PortfolioOpt.conditional_expectation!","text":"conditionalexpectation = -cvar = -expectedshortfall\n\n\n\n\n\n","category":"method"},{"location":"api/#PortfolioOpt.equal_weights-Tuple{Any}","page":"API","title":"PortfolioOpt.equal_weights","text":"Equal weights.\n\n\n\n\n\n","category":"method"},{"location":"api/#PortfolioOpt.max_sharpe-Tuple{Any,Any,Any}","page":"API","title":"PortfolioOpt.max_sharpe","text":"Maximize sharp coeficient alocation.\n\n\n\n\n\n","category":"method"},{"location":"api/#PortfolioOpt.mean_variance_noRf_analytical-Tuple{MeanVariance,Any}","page":"API","title":"PortfolioOpt.mean_variance_noRf_analytical","text":"Mean-Variance Portfolio Alocation With no risk free asset. Analytical solution.\n\n\n\n\n\n","category":"method"},{"location":"api/#PortfolioOpt.mixed_signals_predict_return","page":"API","title":"PortfolioOpt.mixed_signals_predict_return","text":"Mixed signals predictor proposed by Betina and al. Univariate\n\n\n\n\n\n","category":"function"},{"location":"api/#PortfolioOpt.po_max_return_limit_variance!-Tuple{Model,Any,AbstractPortfolioFormulation,Any}","page":"API","title":"PortfolioOpt.po_max_return_limit_variance!","text":"po_max_return_limit_variance!(model::JuMP.Model, w, formulation::AbstractPortfolioFormulation, V_0)\n\nMean-Variance Portfolio Alocation (with a risk free asset). Posed as a quadratic convex problem. Maximizes worst case portfolio return (R) and limit worst case portfolio variance (V) in the uncertainty set (Omega)  to a minimal risk parameter (V_0) normalized by current wealth (W_0).\n\nbeginaligned\nmax_w quad  R \nst quad  R = (min rw    r in Omega) \n V leq MaxRisk * W_0\n V = (max w  Sigma w     Sigma in Omega) \n w in mathcalX \nendaligned\n\nWhere mathcalX represents the additional constraints defined in the model by the user  (like maximum invested money).\n\n\n\n\n\n","category":"method"},{"location":"api/#PortfolioOpt.po_max_utility_return!-Tuple{Model,Any,RobustDelague}","page":"API","title":"PortfolioOpt.po_max_utility_return!","text":"po_max_utility_return!(model::JuMP.Model, w, formulation::RobustDelague)\n\nMaximize expected utility of portfolio return under distribution uncertainty defined by Delague's ambiguity set (RobustDelague).\n\n\n\n\n\n","category":"method"},{"location":"api/#PortfolioOpt.po_min_variance_limit_return!-Tuple{Model,Any,AbstractPortfolioFormulation,Any}","page":"API","title":"PortfolioOpt.po_min_variance_limit_return!","text":"po_min_variance_limit_return!(model::JuMP.Model, w, formulation::AbstractPortfolioFormulation, R)\n\nMean-Variance Portfolio Alocation (with a risk free asset). Posed as a quadratic convex problem. Minimizes worst case portfolio variance (V) and limit worst case portfolio return (R) in the uncertainty set (Omega) to a minimal return parameter (R_0) normalized by current wealth (W_0).\n\nbeginaligned\nmin_w quad  V \nst quad  R = (min rw    r in Omega) \n V = (max w  Sigma w     Sigma in Omega) \n R geq R * W_0 \n w in mathcalX \nendaligned\n\nWhere mathcalX represents the additional constraints defined in the model by the user  (like maximum invested money).\n\n\n\n\n\n","category":"method"},{"location":"api/#PortfolioOpt.portfolio_return!-Tuple{Model,Any,AbstractMeanVariance}","page":"API","title":"PortfolioOpt.portfolio_return!","text":"portfolio_return!(model::JuMP.Model, w, formulation::AbstractMeanVariance; kwargs...)\n\nReturn worst case return of the Uncertainty set defined by the formulation.\n\n\n\n\n\n","category":"method"},{"location":"api/#PortfolioOpt.portfolio_return!-Tuple{Model,Any,RobustBenTal}","page":"API","title":"PortfolioOpt.portfolio_return!","text":"portfolio_return!(model::JuMP.Model, w, formulation::RobustBenTal)\n\nReturns worst case return (WCR) in BenTal's uncertainty set (RobustBenTal).\n\nWCR is defined by the following primal problem: \n\nbeginaligned\nmin_mu z quad  mu  w \nst quad  Σ^-frac12 (mu - hatr)  leq delta quad  theta \nendaligned\n\nWhich is equivalent to the following dual problem:\n\nbeginaligned\nmax_theta quad   w  hatr - theta  delta \nst quad  Σ^frac12  w  leq theta \nendaligned\n\nTo avoid solving an optimization problem we enforece the dual constraints in  the upper level problem and return the objective expression (a lower bound of the optimum).\n\nArguments:     - model::JuMP.Model: JuMP upper level portfolio optimization model.     - w: portfolio optimization investment variable (\"weights\").     - formulation::RobustBenTal: Struct containing atributes of BenTal's uncertainty set.\n\n\n\n\n\n","category":"method"},{"location":"api/#PortfolioOpt.portfolio_return!-Tuple{Model,Any,RobustBertsimas}","page":"API","title":"PortfolioOpt.portfolio_return!","text":"portfolio_return!(model::JuMP.Model, w, formulation::RobustBertsimas)\n\nReturns worst case return (WCR) in Bertsimas's uncertainty set (RobustBertsimas).\n\nWCR is defined by the following primal problem: \n\nbeginaligned\nmin_mu z quad  mu  w \nst quad  mu_i leq hatr_i + z_i Delta_i quad forall i = 1mathcalN quad  pi^-_i \n mu_i geq hatr_i - z_i Delta_i  quad forall i = 1mathcalN quad  pi^+_i \n z_i geq 0 quad forall i = 1mathcalN \n z_i leq 1 quad forall i = 1mathcalN quad  theta_i \n sum_i^mathcalN z_i leq Gamma quad  lambda \nendaligned\n\nWhich is equivalent to the following dual problem:\n\nbeginaligned\nmax_lambda pi^- pi^+ theta quad  sum_i^mathcalN (hatr_i (pi^+_i pi^-_i) - theta_i ) - Gamma lambda\nst quad   w_i = pi^+_i - pi^-_i  quad forall i = 1mathcalN \n  Delta_i (pi^+_i + pi^-_i) - theta_i leq lambda quad forall i = 1mathcalN \n lambda geq 0   pi^- geq 0   pi^+ geq 0   theta geq 0 \nendaligned\n\nTo avoid solving an optimization problem we enforece the dual constraints in  the upper level problem and return the objective expression (a lower bound of the optimum).\n\nArguments:\n\nmodel::JuMP.Model: JuMP upper level portfolio optimization model.\nw: portfolio optimization investment variable (\"weights\").\nformulation::RobustBertsimas: Struct containing atributes of Bertsimas's uncertainty set.\n\n\n\n\n\n","category":"method"},{"location":"api/#PortfolioOpt.portfolio_return!-Tuple{Model,Any,RobustBetina}","page":"API","title":"PortfolioOpt.portfolio_return!","text":"portfolio_return!(model::JuMP.Model, w, formulation::RobustBetina)\n\nReturns worst case return in Betina's uncertainty set, defined by the following dual problem: \n\nmax_theta quad  theta \nst  quad theta leq r_s  w quad forall s = 1mathcalS \n\n\n\n\n\n","category":"method"},{"location":"api/#PortfolioOpt.portfolio_variance!-Tuple{Model,Any,AbstractMeanVariance}","page":"API","title":"PortfolioOpt.portfolio_variance!","text":"portfolio_variance!(model::JuMP.Model, w, formulation::AbstractMeanVariance; kwargs...)\n\nReturn worst case variance of the Uncertainty set defined by the formulation.\n\n\n\n\n\n","category":"method"},{"location":"api/#PortfolioOpt.predicted_portfolio_return!-Tuple{Model,Any,AbstractMeanVariance}","page":"API","title":"PortfolioOpt.predicted_portfolio_return!","text":"predicted_portfolio_return!(model::JuMP.Model, w, formulation::AbstractMeanVariance)\n\nReturn predicted return used in the formulation.\n\n\n\n\n\n","category":"method"},{"location":"api/#PortfolioOpt.predicted_portfolio_variance!-Tuple{Model,Any,AbstractMeanVariance}","page":"API","title":"PortfolioOpt.predicted_portfolio_variance!","text":"predicted_portfolio_variance!(model::JuMP.Model, w, formulation::AbstractMeanVariance)\n\nReturn predicted variance used in the formulation.\n\n\n\n\n\n","category":"method"},{"location":"api/#TestUtils","page":"API","title":"TestUtils","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [PortfolioOpt.TestUtils]\nPrivate = false","category":"page"},{"location":"api/#PortfolioOpt.TestUtils","page":"API","title":"PortfolioOpt.TestUtils","text":"TestUtils\n\nSome commom test utilities for portfolio optimization formulations.\n\nMainly:     - get_test_data that returns a TimeArray of Prices for 6 assets.     - backtest_po that provides a basic backtest using provided strategy and returns data.\n\n\n\n\n\n","category":"module"},{"location":"api/#PortfolioOpt.TestUtils.backtest_po-Tuple{Function,Any}","page":"API","title":"PortfolioOpt.TestUtils.backtest_po","text":"Simple backtest logic\n\n\n\n\n\n","category":"method"},{"location":"api/#PortfolioOpt.TestUtils.base_model-Tuple{Integer}","page":"API","title":"PortfolioOpt.TestUtils.base_model","text":"base_model(numA) -> model, w\n\nCreates a JuMP model with generic PO variable and constraints:     - Investment vector of variables w (portfolio weights if budget is 1).     - Invested monney should be lower than a budget.\n\nReturns the model and a reference to the decision variable w.\n\n\n\n\n\n","category":"method"},{"location":"api/#PortfolioOpt.TestUtils.compute_solution_backtest-Tuple{Model,Any,Any}","page":"API","title":"PortfolioOpt.TestUtils.compute_solution_backtest","text":"Basic solution\n\n\n\n\n\n","category":"method"},{"location":"api/#PortfolioOpt.TestUtils.get_test_data-Tuple{}","page":"API","title":"PortfolioOpt.TestUtils.get_test_data","text":"Get test data (Prices) from MarketData.\n\n\n\n\n\n","category":"method"},{"location":"api/#PortfolioOpt.TestUtils.mean_variance-Tuple{Any}","page":"API","title":"PortfolioOpt.TestUtils.mean_variance","text":"Mean and Variance of returns\n\n\n\n\n\n","category":"method"},{"location":"api/#PortfolioOpt.TestUtils.readjust_volumes-Tuple{Any,Any}","page":"API","title":"PortfolioOpt.TestUtils.readjust_volumes","text":"Ajust volumes to be feasible under current wealth\n\n\n\n\n\n","category":"method"},{"location":"examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/#Backtest-Example","page":"Examples","title":"Backtest Example","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"using COSMO\nusing PortfolioOpt\nusing PortfolioOpt.TestUtils: \n    backtest_po, compute_solution_backtest, get_test_data, mean_variance, base_model, \n    percentchange, timestamp, rename!\n\nprices = get_test_data()\nnumD, numA = size(prices) # A: Assets    D: Days\nreturns_series = percentchange(prices)\n\nsolver = optimizer_with_attributes(\n    COSMO.Optimizer, \"verbose\" => false, \"max_iter\" => 900000\n)\n\nstart_date = timestamp(returns_series)[100]\n\nwealth_strategy, returns_strategy =\n    backtest_po(returns_series; start_date=start_date) \n        do past_returns, W_0, risk_free_return\n\n        # Prep data provided by the backtest pipeline\n        numD, numA = size(past_returns)\n        returns = values(past_returns)\n        # calculate mean and variance for the past 60 days\n        Σ, r̄ = mean_variance(returns[(end - 60):end, :])\n\n        # Parameters\n        # maximum acceptable normalized variance for our portfolio\n        max_risk = 0.8\n        formulation = MeanVariance(;\n            predicted_mean = r̄_s,\n            predicted_covariance = Σ,\n        )\n\n        # Build model \n        # creates jump model with portfolio weights variable w\n        model, w = base_model(numA; allow_borrow=false)\n        # modifies the problem to add fromulation variable and constraints\n        po_max_return_limit_variance!(model, w, formulation, max_risk; rf = rf)\n\n        # Optimize model and retrieve solution (x = optimal w value)\n        x = compute_solution_backtest(model, w, solver)\n\n        # return invested portfolio in used currency\n        return x * W_0\nend\n","category":"page"},{"location":"examples/#Plot-Results","page":"Examples","title":"Plot Results","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"using Plots\n\nplot(\n    wealth_strategy;\n    title=\"Culmulative Wealth\",\n    xlabel=\"Time\",\n    ylabel=\"Wealth\",\n    legend=:outertopright,\n)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"(Image: )","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = PortfolioOpt","category":"page"},{"location":"","page":"Home","title":"Home","text":"<div style=\"width:100%; height:150px;border-width:4px;border-style:solid;padding-top:25px;\n        border-color:#000;border-radius:10px;text-align:center;background-color:#99DDFF;\n        color:#000\">\n    <h3 style=\"color: black;\">Star us on GitHub!</h3>\n    <a class=\"github-button\" href=\"https://github.com/andrewrosemberg/PortfolioOpt.jl\" data-icon=\"octicon-star\" data-size=\"large\" data-show-count=\"true\" aria-label=\"Star andrewrosemberg/PortfolioOpt.jl on GitHub\" style=\"margin:auto\">Star</a>\n    <script async defer src=\"https://buttons.github.io/buttons.js\"></script>\n</div>","category":"page"},{"location":"#PortfolioOpt","page":"Home","title":"PortfolioOpt","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Simple package with Portfolio Optimization (PO) formulations using JuMP.jl.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The current package is unregistered so you will need to add it as follows:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> ] add https://github.com/andrewrosemberg/PortfolioOpt.jl.git ","category":"page"},{"location":"#PO-Strategies","page":"Home","title":"PO Strategies","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"There are two types of strategies implemented in this package: ","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modifying functions (identifiable by a ! at the end of the function) that receive a JuMP model, a reference to the investment variable present in this model, the formulation and parameters of the strategy as inputs, and modifies the model by adding the necessary variables and constraints. Currently implemented ones are: \npo_max_conditional_expectation_limit_predicted_return! \npo_max_predicted_return_limit_conditional_expectation!\npo_max_predicted_return_limit_return!\npo_max_return_limit_variance!\npo_max_utility_return!\npo_min_variance_limit_return!\n\"End-to-End\" functions that receive parameters as inputs and output the weights of a portfolio summing up to the maximum wealth defined in the parameters. These are mainly simple rules or analytical solutions to simple PO formulations: \nmax_sharpe \nequal_weights \nmean_variance_noRf_analytical","category":"page"},{"location":"","page":"Home","title":"Home","text":"Normally this package won't focus nor make available forecasting functionalities, but, as an exception, there is one univariate point-prediction forecasting function exported: ","category":"page"},{"location":"","page":"Home","title":"Home","text":"mixed_signals_predict_return","category":"page"},{"location":"#TestUtils","page":"Home","title":"TestUtils","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"As an extra, some testing utilities are available through the submodule called TestUtils.  Mainly:","category":"page"},{"location":"","page":"Home","title":"Home","text":"get_test_data that returns a TimeArray of Prices for 6 assets.\nbacktest_po that provides a basic backtest using provided strategy and returns data.","category":"page"},{"location":"","page":"Home","title":"Home","text":"But also:","category":"page"},{"location":"","page":"Home","title":"Home","text":"readjust_volumes\nbase_model\ncompute_solution_backtest\nmean_variance","category":"page"},{"location":"#Contents","page":"Home","title":"Contents","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"robust_po.md\", \"examples.md\", \"api.md\"]","category":"page"}]
}
